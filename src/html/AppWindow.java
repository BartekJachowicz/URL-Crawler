package html;

import java.io.IOException;
import java.util.Collection;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import javax.swing.SwingWorker;
import java.sql.*;
import java.util.Calendar;
import org.jsoup.nodes.Document;

public class AppWindow extends javax.swing.JFrame {

    public AppWindow() {
        initComponents();
        getHistory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressbar = new javax.swing.JProgressBar();
        LinkList = new java.awt.List();
        ImagesList = new java.awt.List();
        url = new java.awt.TextField();
        jLabel1 = new javax.swing.JLabel();
        UpLabel = new java.awt.Label();
        jLabel2 = new javax.swing.JLabel();
        Button = new javax.swing.JButton();
        ResultLabel = new java.awt.Label();
        HistoryList = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        LinkList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LinkListActionPerformed(evt);
            }
        });

        url.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                urlActionPerformed(evt);
            }
        });

        jLabel1.setText("Links:");

        UpLabel.setText("Type URL:");

        jLabel2.setText("Images:");

        Button.setText("Start");
        Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonActionPerformed(evt);
            }
        });

        HistoryList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        HistoryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistoryListActionPerformed(evt);
            }
        });

        jLabel3.setText("History:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(HistoryList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ResultLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(url, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(40, 40, 40)
                            .addComponent(Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jLabel1)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(UpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ImagesList, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                        .addComponent(LinkList, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(UpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(url, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(19, 19, 19)
                .addComponent(LinkList, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ImagesList, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(HistoryList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void urlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_urlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_urlActionPerformed

    boolean option = true;
    private void ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonActionPerformed
            start();
    }//GEN-LAST:event_ButtonActionPerformed

    private void LinkListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LinkListActionPerformed
        String str = LinkList.getSelectedItem();
        url.setText(str);
        start();
    }//GEN-LAST:event_LinkListActionPerformed

    private void HistoryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistoryListActionPerformed
        String str = (String) HistoryList.getSelectedItem();
        url.setText(str);
    }//GEN-LAST:event_HistoryListActionPerformed

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        createNewDatabase();
        createNewTable();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppWindow().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button;
    private javax.swing.JComboBox<String> HistoryList;
    private java.awt.List ImagesList;
    private java.awt.List LinkList;
    private java.awt.Label ResultLabel;
    private java.awt.Label UpLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JProgressBar progressbar;
    private java.awt.TextField url;
    // End of variables declaration//GEN-END:variables
    private Worker worker;
    
    private void start(){
        LinkList.removeAll();
        ImagesList.removeAll();
        setProgressBar(0);
        setResultLabel("Connecting...");
        Button.setEnabled(false);
        worker = new Worker(url.getText());
        worker.execute();
    }
    
    private void setLinkList(Collection<String> col){
        col.forEach((str) -> {
            LinkList.add(str);
        });
    }
    
    private void setImagesList(Collection<String> col){
        col.forEach((str) -> {
            ImagesList.add(str);
        });
    }
    
    private void setProgressBar(int value){
        progressbar.setValue(value);
    }
    private void setProgressBarMaxValue(int maxval){
        progressbar.setMaximum(maxval);
    }
    private void setResultLabel(String str){
        ResultLabel.setText(str);
    }
    private void setUrlField(String str){
        url.setText(str);
    }
    
    public class Worker extends SwingWorker<Void, String>{
        private final String url;
        private long size;
        private int images_number;
        private volatile int progress;
        private AtomicLong images_size;
        
        public Worker(String str){
            url = str;
            images_number = 1;
            progress = 0;
            images_size = new AtomicLong(0);
        }
        
        @Override
        protected Void doInBackground() {  
            Document doc = Parser.Readhtml(url);
            
            setResultLabel("Working... ");
            
            Set<String> imgs, lks;
            imgs = Parser.get_images(doc);
            lks = Parser.get_links(doc);
            setLinkList(lks);
            setImagesList(imgs);
            images_number = imgs.size();
            setProgressBarMaxValue(images_number);
            
            ExecutorService threadpool = Executors.newCachedThreadPool();
            
            imgs.forEach((str) -> {
                threadpool.submit(() -> {
                    try {
                        size = Parser.get_image_size(str);
                        images_size.getAndAdd(size);
                        publish(str);
                    } catch (IOException ex) {
                        System.out.println(ex.getMessage());
                    }
                });
            });
            threadpool.shutdown();
            
            try {
                threadpool.awaitTermination(900, TimeUnit.HOURS);
            } catch (InterruptedException ex) {
                System.out.println(ex.getMessage());
                threadpool.shutdownNow();
            }
            
            setResultLabel(lks.size() + " links, " + imgs.size() + " images. " + 
                            "Size of images: " + images_size.get() + " bytes.");
            
            return null;
        }

        @Override
        protected void done(){
            setProgressBar(images_number);
            Button.setActionCommand("Start");
            Button.setText("Start");
            Button.setEnabled(true);
            java.sql.Date d = new java.sql.Date(Calendar.getInstance().getTime().getTime());
            addToHistory(new History(url, d));
            HistoryList.removeAllItems();
            getHistory();
            setUrlField(url);
        }
        
        @Override
        protected void process(java.util.List<String> list){
            progress += list.size();
            setProgressBar(100*progress/images_number);
        }
    }
    
    private static void createNewDatabase(){
        String url = "jdbc:sqlite:history.sqlite";
 
        try (Connection connection = DriverManager.getConnection(url)) {
            if (connection != null) {
                DatabaseMetaData meta = connection.getMetaData();
                System.out.println("The driver name is " + meta.getDriverName());
                System.out.println("A new database has been created.");
                connection.close();
            }
 
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    private static void createNewTable(){
        String url = "jdbc:sqlite:history.sqlite";
        
        String sql = "  CREATE TABLE IF NOT EXISTS history("
                + "	url text UNIQUE NOT NULL,"
                + "     date timestamp);";
        
        try (Connection connection = DriverManager.getConnection(url);
            Statement stmt = connection.createStatement()) {
            stmt.execute(sql);
            System.out.println("Table history created or exists.");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
    
    private void addToHistory(History h){
        String url = "jdbc:sqlite:history.sqlite";
        
        String sql = "INSERT INTO history(url, date) VALUES (?, ?);";
        try (Connection connection = DriverManager.getConnection(url);
            PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, h.getUrl());
            pstmt.setDate(2, h.getDate());
            pstmt.executeUpdate();
            connection.commit();
            connection.close();
        } catch (SQLException e) {
           //System.out.println(e.getMessage());
        }
    }
    
    private void getHistory(){
        String url = "jdbc:sqlite:history.sqlite";
        
        String sql = "SELECT * FROM history ORDER BY date DESC";
        
        try (Connection connection = DriverManager.getConnection(url);
            PreparedStatement pstmt = connection.prepareStatement(sql)) {
            ResultSet resultSet = pstmt.executeQuery();
            
            while (resultSet.next()) {
                String u = resultSet.getString("url");
                if(u != null)
                    HistoryList.addItem(u);
               
            }
            connection.close();
        } catch (SQLException e) {
           //System.out.println(e.getMessage());
        }  
    }
    
    private void clearHistory(){
        String url = "jdbc:sqlite:history.sqlite";
        
        String sql = "DELETE FROM history;";
        
        try (Connection connection = DriverManager.getConnection(url);
            PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.executeQuery();
            connection.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }
}
